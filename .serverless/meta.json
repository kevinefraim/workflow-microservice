{
  "/home/kevin/Desktop/workflow-microservice": {
    "versionSfCore": null,
    "versionFramework": "4.4.7",
    "isWithinCompose": false,
    "isCompose": false,
    "composeOrgName": null,
    "composeResolverProviders": {
      "default-aws-credential-resolver": "<REDACTED>"
    },
    "composeServiceName": null,
    "servicePath": "/home/kevin/Desktop/workflow-microservice",
    "serviceConfigFileName": "serverless.yml",
    "service": {
      "service": "workflow-microservice",
      "frameworkVersion": "4.4.7",
      "provider": {
        "name": "aws",
        "runtime": "nodejs16.x",
        "architecture": "arm64",
        "stage": "production",
        "region": "us-east-1",
        "memorySize": 2048,
        "logRetentionInDays": 1,
        "timeout": 15,
        "versionFunctions": true,
        "compiledCloudFormationTemplate": {
          "AWSTemplateFormatVersion": "2010-09-09",
          "Description": "The AWS CloudFormation template for this Serverless application",
          "Resources": {
            "ApiLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/workflow-microservice-production-api",
                "RetentionInDays": 1
              }
            },
            "IamRoleLambdaExecution": {
              "Type": "AWS::IAM::Role",
              "Properties": {
                "AssumeRolePolicyDocument": {
                  "Version": "2012-10-17",
                  "Statement": [
                    {
                      "Effect": "Allow",
                      "Principal": {
                        "Service": [
                          "lambda.amazonaws.com"
                        ]
                      },
                      "Action": [
                        "sts:AssumeRole"
                      ]
                    }
                  ]
                },
                "Policies": [
                  {
                    "PolicyName": {
                      "Fn::Join": [
                        "-",
                        [
                          "workflow-microservice",
                          "production",
                          "lambda"
                        ]
                      ]
                    },
                    "PolicyDocument": {
                      "Version": "2012-10-17",
                      "Statement": [
                        {
                          "Effect": "Allow",
                          "Action": [
                            "logs:CreateLogStream",
                            "logs:CreateLogGroup",
                            "logs:TagResource"
                          ],
                          "Resource": [
                            {
                              "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/workflow-microservice-production*:*"
                            }
                          ]
                        },
                        {
                          "Effect": "Allow",
                          "Action": [
                            "logs:PutLogEvents"
                          ],
                          "Resource": [
                            {
                              "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/workflow-microservice-production*:*:*"
                            }
                          ]
                        }
                      ]
                    }
                  }
                ],
                "Path": "/",
                "RoleName": {
                  "Fn::Join": [
                    "-",
                    [
                      "workflow-microservice",
                      "production",
                      {
                        "Ref": "AWS::Region"
                      },
                      "lambdaRole"
                    ]
                  ]
                }
              }
            },
            "ApiLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-east-1-ab295ac9-1bb5",
                  "S3Key": "serverless/workflow-microservice/production/1729621449947-2024-10-22T18:24:09.947Z/workflow-microservice.zip"
                },
                "Handler": "dist/lambda.handler",
                "Runtime": "nodejs16.x",
                "FunctionName": "workflow-microservice-production-api",
                "MemorySize": 2048,
                "Timeout": 15,
                "Architectures": [
                  "arm64"
                ],
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "ApiLogGroup"
              ]
            },
            "ApiLambdaVersionv6AdGeaypqgEijXGz7JJHZv7ospT2IFUugCuRL9xGQQ": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "ApiLambdaFunction"
                },
                "CodeSha256": "p9zrJbPnpofOCqFCFGORUfmzokMzEYqXYbLxEfuFfHQ="
              }
            },
            "HttpApi": {
              "Type": "AWS::ApiGatewayV2::Api",
              "Properties": {
                "Name": "production-workflow-microservice",
                "ProtocolType": "HTTP"
              }
            },
            "HttpApiStage": {
              "Type": "AWS::ApiGatewayV2::Stage",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "StageName": "$default",
                "AutoDeploy": true,
                "DefaultRouteSettings": {
                  "DetailedMetricsEnabled": false
                }
              }
            },
            "ApiLambdaPermissionHttpApi": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "ApiLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "HttpApi"
                      },
                      "/*"
                    ]
                  ]
                }
              }
            },
            "HttpApiIntegrationApi": {
              "Type": "AWS::ApiGatewayV2::Integration",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "IntegrationType": "AWS_PROXY",
                "IntegrationUri": {
                  "Fn::GetAtt": [
                    "ApiLambdaFunction",
                    "Arn"
                  ]
                },
                "PayloadFormatVersion": "2.0",
                "TimeoutInMillis": 30000
              }
            },
            "HttpApiRouteAnyProxyVar": {
              "Type": "AWS::ApiGatewayV2::Route",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "RouteKey": "ANY /{proxy+}",
                "Target": {
                  "Fn::Join": [
                    "/",
                    [
                      "integrations",
                      {
                        "Ref": "HttpApiIntegrationApi"
                      }
                    ]
                  ]
                }
              },
              "DependsOn": "HttpApiIntegrationApi"
            }
          },
          "Outputs": {
            "ServerlessDeploymentBucketName": {
              "Value": "serverless-framework-deployments-us-east-1-ab295ac9-1bb5",
              "Export": {
                "Name": "sls-workflow-microservice-production-ServerlessDeploymentBucketName"
              }
            },
            "ApiLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "ApiLambdaVersionv6AdGeaypqgEijXGz7JJHZv7ospT2IFUugCuRL9xGQQ"
              },
              "Export": {
                "Name": "sls-workflow-microservice-production-ApiLambdaFunctionQualifiedArn"
              }
            },
            "HttpApiId": {
              "Description": "Id of the HTTP API",
              "Value": {
                "Ref": "HttpApi"
              },
              "Export": {
                "Name": "sls-workflow-microservice-production-HttpApiId"
              }
            },
            "HttpApiUrl": {
              "Description": "URL of the HTTP API",
              "Value": {
                "Fn::Join": [
                  "",
                  [
                    "https://",
                    {
                      "Ref": "HttpApi"
                    },
                    ".execute-api.",
                    {
                      "Ref": "AWS::Region"
                    },
                    ".",
                    {
                      "Ref": "AWS::URLSuffix"
                    }
                  ]
                ]
              },
              "Export": {
                "Name": "sls-workflow-microservice-production-HttpApiUrl"
              }
            }
          }
        },
        "vpc": {}
      },
      "functions": {
        "api": {
          "handler": "dist/lambda.handler",
          "events": [
            {
              "httpApi": {
                "method": "any",
                "path": "/{proxy+}"
              },
              "resolvedMethod": "ANY",
              "resolvedPath": "/{proxy+}"
            }
          ],
          "name": "workflow-microservice-production-api",
          "package": {},
          "memory": 2048,
          "timeout": 15,
          "runtime": "nodejs16.x",
          "vpc": {},
          "versionLogicalId": "ApiLambdaVersionv6AdGeaypqgEijXGz7JJHZv7ospT2IFUugCuRL9xGQQ"
        }
      },
      "plugins": [
        "serverless-jetpack",
        "serverless-offline"
      ]
    },
    "serviceRawFile": "service: workflow-microservice\n\nframeworkVersion: '4.4.7'\n\nprovider:\n  name: aws\n  runtime: nodejs16.x\n  architecture: arm64\n  stage: production\n  region: us-east-1\n  memorySize: 2048\n  logRetentionInDays: 1\n  timeout: 15\n  \n\nfunctions:\n  api:\n    handler: dist/lambda.handler\n    events:\n      - httpApi:\n          method: any\n          path: /{proxy+}\n\nplugins:\n  - serverless-jetpack\n  - serverless-offline",
    "command": [
      "deploy"
    ],
    "options": {},
    "error": null,
    "params": {},
    "machineId": "fd6d10506ef3e93e91f9b7b2f1f395f3",
    "stage": "production",
    "accessKeyV2": "<REDACTED>",
    "accessKeyV1": "<REDACTED>",
    "orgId": "49370360-0d59-407d-b9b0-7731ca6452b9",
    "orgName": "romvo",
    "userId": "vFk9kmFjCl7SR7frG8",
    "dashboard": {
      "isEnabledForService": false,
      "requiredAuthentication": false,
      "orgFeaturesInUse": null,
      "orgObservabilityIntegrations": null,
      "serviceAppId": null,
      "serviceProvider": null,
      "instanceParameters": null
    },
    "userName": "romvo",
    "subscription": null,
    "userEmail": "kevin.efraim@greelow.com",
    "serviceProviderAwsRegion": "us-east-1",
    "serviceProviderAwsCredentials": "<REDACTED>",
    "serviceProviderAwsAccountId": "269079998557",
    "projectType": "traditional",
    "versionSf": "4.4.7",
    "serviceProviderAwsCfStackName": "workflow-microservice-production",
    "integrations": {},
    "serviceUniqueId": "arn:aws:cloudformation:us-east-1:269079998557:stack/workflow-microservice-production/e7bab790-90a2-11ef-a158-0e0946da248b",
    "serviceProviderAwsCfStackId": "arn:aws:cloudformation:us-east-1:269079998557:stack/workflow-microservice-production/e7bab790-90a2-11ef-a158-0e0946da248b",
    "serviceProviderAwsCfStackCreated": "2024-10-22T18:24:41.984Z",
    "serviceProviderAwsCfStackUpdated": null,
    "serviceProviderAwsCfStackStatus": "CREATE_COMPLETE",
    "serviceProviderAwsCfStackOutputs": [
      {
        "OutputKey": "ApiLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-1:269079998557:function:workflow-microservice-production-api:1",
        "Description": "Current Lambda function version",
        "ExportName": "sls-workflow-microservice-production-ApiLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "HttpApiId",
        "OutputValue": "xhoi4yyxua",
        "Description": "Id of the HTTP API",
        "ExportName": "sls-workflow-microservice-production-HttpApiId"
      },
      {
        "OutputKey": "ServerlessDeploymentBucketName",
        "OutputValue": "serverless-framework-deployments-us-east-1-ab295ac9-1bb5",
        "ExportName": "sls-workflow-microservice-production-ServerlessDeploymentBucketName"
      },
      {
        "OutputKey": "HttpApiUrl",
        "OutputValue": "https://xhoi4yyxua.execute-api.us-east-1.amazonaws.com",
        "Description": "URL of the HTTP API",
        "ExportName": "sls-workflow-microservice-production-HttpApiUrl"
      }
    ]
  }
}